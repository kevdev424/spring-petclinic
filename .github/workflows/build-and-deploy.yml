name: Build

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ main ]
  workflow_call:
  
permissions:
  contents: read
  issues: read
  checks: write
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ '17' ]
        language: [ 'java' ]
    steps:
      - name: Checkout
      - uses: actions/checkout@v3

      - name: Set up JDK ${{matrix.java}}
        uses: actions/setup-java@v3
        with:
          java-version: ${{matrix.java}}
          distribution: 'adopt'
          cache: maven

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build with Maven Wrapper
        run: ./mvnw -B package

      - name: Run tests with Maven
        run: mvn -B test --file pom.xml

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        id: test-results
        if: always()
        with:
          junit_files: "**/target/surefire-reports/TEST-*.xml"      

      - name: test-results
        run: | 
            echo '${{ steps.test-results.outputs.json }}' > test-results.json
            echo $(date) >> test-results.json

      - name: Set badge color
        shell: bash
        run: |
          case ${{ fromJSON( steps.test-results.outputs.json ).conclusion }} in
            success)
              echo "BADGE_COLOR=31c653" >> $GITHUB_ENV
              ;;
            failure)
              echo "BADGE_COLOR=800000" >> $GITHUB_ENV
              ;;
            neutral)
              echo "BADGE_COLOR=696969" >> $GITHUB_ENV
              ;;
          esac

      - name: Create badge
        uses: emibcn/badge-action@v2.0.2
        with:
          label: Tests
          status: '${{ fromJSON( steps.test-results.outputs.json ).formatted.stats.tests }} tests, ${{ fromJSON( steps.test-results.outputs.json ).formatted.stats.runs }} runs: ${{ fromJSON( steps.test-results.outputs.json ).conclusion }}'
          color: ${{ env.BADGE_COLOR }}
          path: badge.svg

      - name: Upload badge to Gist
        # Upload only for main branch
        if: >
          github.event_name == 'workflow_run' && github.event.workflow_run.head_branch == 'main' ||
          github.event_name != 'workflow_run' && github.ref == 'refs/heads/main'
        uses: andymckay/append-gist-action@1fbfbbce708a39bd45846f0955ed5521f2099c6d
        with:
          token: ${{ secrets.GIST_TOKEN }}
          gistURL: https://gist.github.com/kevdev424/c23a0c5e0cb2fa93ecf6660d43280060
          file: badge.svg

      - name: Upload json to Gist
        # Upload only for main branch
        if: >
          github.event_name == 'workflow_run' && github.event.workflow_run.head_branch == 'main' ||
          github.event_name != 'workflow_run' && github.ref == 'refs/heads/main'
        uses: andymckay/append-gist-action@1fbfbbce708a39bd45846f0955ed5521f2099c6d
        with:
          token: ${{ secrets.GIST_TOKEN }}
          gistURL: https://gist.github.com/kevdev424/dea58201c2164fe01617df1fa2a6216d
          file: test-results.json

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:${{matrix.language}}"
          
      - name: Publish package
        # Package only for main branch
        if: >
          github.event_name == 'workflow_run' && github.event.workflow_run.head_branch == 'main' ||
          github.event_name != 'workflow_run' && github.ref == 'refs/heads/main'
        run: ./mvnw --batch-mode deploy
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    deploy:
      if: ${{ github.actor != 'dependabot[bot]'}}
      permissions:
        id-token: write
        contents: none
      runs-on: ubuntu-latest
      environment: dev
      steps:
        - name: "Az CLI login"
          uses: azure/login@v1
          with:
            client-id: ${{ secrets.AZURE_CLIENT_ID }}
            tenant-id: ${{ secrets.AZURE_TENANT_ID }}
            subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

        - name: Create resource group
          run: az group create -l eastus -n td-petclinic-rg

        - name: Deploy resource from bicep file
          uses: azure/arm-deploy@v1
          with:
            subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
            resourceGroupName: td-petclinic-rg
            template: ./main.bicep
            failOnStdErr: false

        - name: Deploy to Azure Web App
          id: deploy-to-webapp
          uses: azure/webapps-deploy@v2
          with:
            app-name: ${{ env.AZURE_WEBAPP_NAME }}
            package: "${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/target/*.jar"

        # Azure logout
        - name: logout
          run: |
            az logout
      